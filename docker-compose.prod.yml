version: '3.9'
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: runner # Changed from deps to runner for production
    ports:
      - '8080:8080'
    volumes:
      - .:/app
      - /app/node_modules
    command: >
      sh -c "
        echo 'Waiting for postgres...' &&
        until nc -z postgres 5432; do sleep 1; done &&
        echo 'PostgreSQL started' &&
        yarn prisma generate &&
        yarn prisma migrate deploy &&
        yarn start:prod
      "
    environment:
      NODE_ENV: production # Changed to production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
    restart: unless-stopped # Added restart policy
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck: # Added API healthcheck
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:8080/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata # Added explicit PGDATA
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    restart: unless-stopped # Added restart policy
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    restart: unless-stopped # Added restart policy
    command: redis-server --appendonly yes # Added data persistence
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
