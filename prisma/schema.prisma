datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  isActive   Boolean     @default(false)
  password   String
  level      Int         @default(1)
  experience Int         @default(0)
  startDate  DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  sessions   Session[]
  dailyPlans DailyPlan[]
  histories  History[]

  @@map("users")
}

model Exercise {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  difficultyXP  Int            @default(10)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sessions      Session[]
  planExercises PlanExercise[]

  @@map("exercises")
}

model DailyPlan {
  id               Int            @id @default(autoincrement())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  label            String?
  repeatDays       String[] // ["MONDAY", "WEDNESDAY", "FRIDAY"]
  notificationTime DateTime?
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  exercises        PlanExercise[]

  @@index([userId, isActive])
  @@map("daily_plans")
}

model PlanExercise {
  id          Int       @id @default(autoincrement())
  dailyPlan   DailyPlan @relation(fields: [dailyPlanId], references: [id])
  dailyPlanId Int
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId  Int
  sets        Int // Number of sets planned
  reps        Int // Number of reps per set
  order       Int // Exercise order in plan
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())

  @@index([dailyPlanId, isCompleted])
  @@map("plan_exercises")
}

model Session {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  totalSets  Int
  totalReps  Int
  startTime  DateTime
  endTime    DateTime
  status     String    @default("completed") // Only store completed sessions
  notes      String?
  histories  History[]
  createdAt  DateTime  @default(now())

  @@index([userId, startTime])
  @@map("sessions")
}

model History {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId Int
  setNumber Int
  reps      Int
  duration  Int // in seconds
  metadata  Json? // For additional tracking (weight, difficulty, etc)
  createdAt DateTime @default(now())

  @@index([userId, sessionId])
  @@map("histories")
}
